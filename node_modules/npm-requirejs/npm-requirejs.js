// a map of main files for modules that don't have them defined YET (module:mainFile)
var mainFiles = {
	"touch-splitter-jquery": "src/jquery.touchsplitter.js"
};

var npm = require("npm");
npm.load(npm.config, function (err) {
	if (err) throw(err);
	npm.commands.list([], true, function(err, pkgInfo) {
		var rjsConfig = getRequireJSConfigFromPackageInfo(pkgInfo);
		
		var codeConfig = getCodeConfigForRequireJSConfig(pkgInfo, rjsConfig);
		var configFile = rjsConfig.baseUrl + rjsConfig.configFile;
		console.log("Write AMD configuration to '" + configFile + "': \n" + codeConfig);
		var fs = require("fs");
		fs.writeFileSync(configFile, codeConfig);
		console.log("require.js configuration file written to " + configFile);
	
		runRequireJS(rjsConfig);
	});
});


function getRequireJSConfigFromPackageInfo(pkgInfo) {
	var rjsConfig = { 'name': pkgInfo.name
	
			, 'outDir': "src/main/webapp/res/"
			, 'srcDir': "src/main/js/"
			, 'modulesDir': "../../../node_modules/"
			, 'configFile': "../../../src/main/webapp/res/config.js"
			
			, 'map': {
				'*': {
					'jQuery': 'jquery'
					, 'jQueryUI': 'jqueryui'
				}
			}
			, 'include': []
		};
	
	rjsConfig.out = rjsConfig.outDir + pkgInfo.main;
	rjsConfig.baseUrl = rjsConfig.srcDir;
	rjsConfig.include.push(rjsConfig.configFile);	
	//rjsConfig.configDir = "requirejs-config/";
	//rjsConfig.mainConfigFile = rjsConfig.configDir + pkgInfo.main;
	
	rjsConfig.paths = {};
	rjsConfig.paths[rjsConfig.name] = normalizePath(pkgInfo.main);
	for (var d in pkgInfo.dependencies) {
		if (d && pkgInfo.dependencies[d].name && !pkgInfo.dependencies[d].extraneous) {
			var depName = pkgInfo.dependencies[d].name;
			var mainFile =  pkgInfo.dependencies[d].main || mainFiles[depName];
			rjsConfig.paths[depName] = normalizePath(rjsConfig.modulesDir + depName + "/" + mainFile);
		}
	}

	if (pkgInfo.dependencies.almond) {
		if (!rjsConfig.include) {
			rjsConfig.include = [];
		}
		rjsConfig.include.push(rjsConfig.modulesDir + pkgInfo.dependencies["almond"].name + "/" + pkgInfo.dependencies["almond"].main);
	}
	
	rjsConfig.shim = pkgInfo.config.amd.shim || pkgInfo.config.requirejs.shim || pkgInfo.config.shim;
	if (pkgInfo.config.amd.map) {
		rjsConfig.map = pkgInfo.config.amd.map;
	}
	
	if (pkgInfo.config.debug) {
		rjsConfig.optimize = "none";
		rjsConfig.preserveLicenseComments = false;
		rjsConfig.generateSourceMaps = true;
	} else {
		rjsConfig.optimize = "uglify2";
		rjsConfig.generateSourceMaps = false;
	}
		
	rjsConfig.skipModuleInsertion = true;
	
	return rjsConfig;
}

function getCodeConfigForRequireJSConfig(pkgInfo, rjsConfig) {
	var code = "require.config(" + JSON.stringify(rjsConfig, null, "\t") + ");";
	
	// define non-amd-modules for almond
	if (pkgInfo.dependencies.almond && rjsConfig.shim) {
		for (var shimName in rjsConfig.shim) {
			if (rjsConfig.shim.hasOwnProperty(shimName)) {
				var shim = rjsConfig.shim[shimName];
				code += "\ndefine('" + shimName 
						+ "', " + JSON.stringify(shim.deps || []) 
						+ ", function() { return " + (shim.exports || "document") + "}"
						+ ");" 
			}
		}
	}
	
	return code;
}

function normalizePath(path) {
	if (path.lastIndexOf(".js") == path.length - 3) {
		path = path.substring(0, path.length - 3);
	}
	return path;
}

function runRequireJS(rjsConfig) {
	var requirejs = require('requirejs');

	console.log("Using below require.js configuration for module " + process.env.npm_package_name);
	console.log(rjsConfig);

	requirejs.optimize(rjsConfig, function (buildResponse) {
		console.log(buildResponse);
	});
}


